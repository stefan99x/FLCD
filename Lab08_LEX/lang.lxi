%{ 	 
#include <stdio.h>
#include <string.h>
#include "y.tab.h"

int currentLine = 1;
%} 

%option noyywrap
%option caseless

DIGIT 		[0-9]
NZ_DIGIT    [1-9]
ZERO        [0]
NUMBER      {NZ_DIGIT}{DIGIT}*
SIGN        [+]|[-]
INTEGER		{ZERO}|{NUMBER}|{SIGN}{NUMBER}
SIGNER_INTEGER {SIGN}{NUMBER}
SPECIAL_CHAR    "_"|"."|","|";"|":"|"?"|"!"|"@"|"/"|"("|")"|"-"|"+"|"="|"{"|"}"|"*"|"["|"]"|"$"|"%"|"^"|" "
CHAR        {DIGIT}|{SPECIAL_CHAR}|[a-zA-Z]
CHARACTER 	"'"{CHAR}"'"
STRING		[\"]{CHAR}*[\"]
CONSTANT		{STRING}|{INTEGER}|{CHARACTER}
IDENTIFIER 		[a-zA-Z][a-zA-Z0-9_]*

%%

"&&" {printf("%s\n",yytext);return AND;}
"||" {printf("%s\n",yytext);return OR;}
ton {printf("%s\n",yytext);return NOT;}
fi {printf("%s\n",yytext);return IF;}
esle {printf("%s\n",yytext);return ELSE;}
file {printf("%s\n",yytext);return ELIF;}
elihw {printf("%s\n",yytext);return WHILE;}
rof {printf("%s\n",yytext);return FOR;}
daer {printf("%s\n",yytext);return READ;}
etirw {printf("%s\n",yytext);return WRITE;}
regetni {printf("%s\n",yytext);return INTEGER;}
gnirts {printf("%s\n",yytext);return STRING;}
rahc {printf("%s\n",yytext);return CHAR;}
margopr {printf("%s\n",yytext);return PROGRAM;}
noitcnuf {printf("%s\n",yytext);return FUNCTION;}
loop {printf("%s\n",yytext);return BOOL;}
nruter {printf("%s\n",yytext);return RETURN;}
true {printf("%s\n",yytext);return TRUE;}
false {printf("%s\n",yytext);return FALSE;}


{CONSTANT} {printf("%s\n",yytext);return CONSTANT;}
{IDENTIFIER} {printf("%s\n",yytext);return IDENTIFIER;}
{NZ_DIGIT} {printf("%s\n",yytext);return NON_ZERO_DIGIT;}
{DIGIT} {printf("%s\n",yytext);return NUMBER_DIGIT;}

; {printf("%s\n",yytext);return SEMI_COLON;}
"," {printf("%s\n",yytext);return COMMA;}
\t {printf("%s\n",yytext);return DOT;}
\{ {printf("%s\n",yytext);return OPEN_CURLY_BRACKET;}
\} {printf("%s\n",yytext);return CLOSED_CURLY_BRACKET;}
\[ {printf("%s\n",yytext);return OPEN_SQUARE_BRACKET;}
\] {printf("%s\n",yytext);return CLOSED_SQUARE_BRACKET;}
\( {printf("%s\n",yytext);return OPEN_ROUND_BRACKET;}
\) {printf("%s\n",yytext);return CLOSED_ROUND_BRACKET;}

\+ {printf("%s\n",yytext);return PLUS;}
\- {printf("%s\n",yytext);return MINUS;}
\* {printf("%s\n",yytext);return MUL;}
\/ {printf("%s\n",yytext);return DIV;}
\% { printf("%s\n",yytext);return PERCENT;}
\< {printf("%s\n",yytext); return LT;}
\> { printf("%s\n",yytext);return GT;}
\<= {printf("%s\n",yytext); return LE;}
\>= { printf("%s\n",yytext);return GE;}
"=" { printf("%s\n",yytext);return ATRIB;}
\== { printf("%s\n",yytext);return EQ;}
\!= { printf("%s\n",yytext);return NOT_EQ;}

[\n\r] {currentLine++;}
[ \t\n]+ {}

[a-zA-Z_0-9][a-zA-Z0-9_]* {printf("%s - illegal identifier found at line %d\n", yytext, currentLine);}
\'[a-zA-Z0-9]*\' {printf("%s - illegal char at line %d, did you mean string?\n", yytext, currentLine);}
[\"]{CHAR}* {printf("%s - illegal string constant at line, you forgot to close it %d\n", yytext, currentLine);}

. {printf("%s - illegal token found at line %d\n",yytext, currentLine);}

%%